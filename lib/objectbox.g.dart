// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/db/author_db.dart';
import 'models/db/podcast_db.dart';
import 'models/db/schedule_db.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6217248595519736827),
      name: 'PodcastDB',
      lastPropertyId: const obx_int.IdUid(6, 7683314106615094904),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 701805690188399603),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5309749079339568730),
            name: 'podcastName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1776169484091158962),
            name: 'onlyMusic',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3345392090542985279),
            name: 'isActive',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7417973334998021765),
            name: 'hasEpisodes',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7683314106615094904),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 4170593813564474541),
            name: 'schedules',
            targetId: const obx_int.IdUid(4, 1847342292373639521)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 88839429434379249),
            name: 'authors',
            targetId: const obx_int.IdUid(3, 598295649207872808))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 598295649207872808),
      name: 'AuthorDB',
      lastPropertyId: const obx_int.IdUid(3, 1520533850589353794),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2017490932517286518),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1904812446304158006),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1520533850589353794),
            name: 'isGuest',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 1847342292373639521),
      name: 'ScheduleDB',
      lastPropertyId: const obx_int.IdUid(4, 7394865029731165766),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7162624023361975606),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 879603288355287610),
            name: 'weekday',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3031314473181113401),
            name: 'start',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7394865029731165766),
            name: 'end',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 1847342292373639521),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(4, 88839429434379249),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [7018342820532340542],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1598863114242869578,
        281332924376562555,
        7847201808243043888
      ],
      retiredRelationUids: const [559890034703527719, 3085588869725977564],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    PodcastDB: obx_int.EntityDefinition<PodcastDB>(
        model: _entities[0],
        toOneRelations: (PodcastDB object) => [],
        toManyRelations: (PodcastDB object) => {
              obx_int.RelInfo<PodcastDB>.toMany(3, object.id): object.schedules,
              obx_int.RelInfo<PodcastDB>.toMany(4, object.id): object.authors
            },
        getId: (PodcastDB object) => object.id,
        setId: (PodcastDB object, int id) {
          object.id = id;
        },
        objectToFB: (PodcastDB object, fb.Builder fbb) {
          final podcastNameOffset = object.podcastName == null
              ? null
              : fbb.writeString(object.podcastName!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, podcastNameOffset);
          fbb.addBool(2, object.onlyMusic);
          fbb.addBool(3, object.isActive);
          fbb.addBool(4, object.hasEpisodes);
          fbb.addOffset(5, imageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PodcastDB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..podcastName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..onlyMusic =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8)
            ..isActive =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10)
            ..hasEpisodes =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12)
            ..image = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);
          obx_int.InternalToManyAccess.setRelInfo<PodcastDB>(object.schedules,
              store, obx_int.RelInfo<PodcastDB>.toMany(3, object.id));
          obx_int.InternalToManyAccess.setRelInfo<PodcastDB>(object.authors,
              store, obx_int.RelInfo<PodcastDB>.toMany(4, object.id));
          return object;
        }),
    AuthorDB: obx_int.EntityDefinition<AuthorDB>(
        model: _entities[1],
        toOneRelations: (AuthorDB object) => [],
        toManyRelations: (AuthorDB object) => {},
        getId: (AuthorDB object) => object.id,
        setId: (AuthorDB object, int id) {
          object.id = id;
        },
        objectToFB: (AuthorDB object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.isGuest);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AuthorDB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..isGuest =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8);

          return object;
        }),
    ScheduleDB: obx_int.EntityDefinition<ScheduleDB>(
        model: _entities[2],
        toOneRelations: (ScheduleDB object) => [],
        toManyRelations: (ScheduleDB object) => {},
        getId: (ScheduleDB object) => object.id,
        setId: (ScheduleDB object, int id) {
          object.id = id;
        },
        objectToFB: (ScheduleDB object, fb.Builder fbb) {
          final startOffset =
              object.start == null ? null : fbb.writeString(object.start!);
          final endOffset =
              object.end == null ? null : fbb.writeString(object.end!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.weekday);
          fbb.addOffset(2, startOffset);
          fbb.addOffset(3, endOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ScheduleDB()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..weekday =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6)
            ..start = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..end = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [PodcastDB] entity fields to define ObjectBox queries.
class PodcastDB_ {
  /// See [PodcastDB.id].
  static final id =
      obx.QueryIntegerProperty<PodcastDB>(_entities[0].properties[0]);

  /// See [PodcastDB.podcastName].
  static final podcastName =
      obx.QueryStringProperty<PodcastDB>(_entities[0].properties[1]);

  /// See [PodcastDB.onlyMusic].
  static final onlyMusic =
      obx.QueryBooleanProperty<PodcastDB>(_entities[0].properties[2]);

  /// See [PodcastDB.isActive].
  static final isActive =
      obx.QueryBooleanProperty<PodcastDB>(_entities[0].properties[3]);

  /// See [PodcastDB.hasEpisodes].
  static final hasEpisodes =
      obx.QueryBooleanProperty<PodcastDB>(_entities[0].properties[4]);

  /// See [PodcastDB.image].
  static final image =
      obx.QueryStringProperty<PodcastDB>(_entities[0].properties[5]);

  /// see [PodcastDB.schedules]
  static final schedules =
      obx.QueryRelationToMany<PodcastDB, ScheduleDB>(_entities[0].relations[0]);

  /// see [PodcastDB.authors]
  static final authors =
      obx.QueryRelationToMany<PodcastDB, AuthorDB>(_entities[0].relations[1]);
}

/// [AuthorDB] entity fields to define ObjectBox queries.
class AuthorDB_ {
  /// See [AuthorDB.id].
  static final id =
      obx.QueryIntegerProperty<AuthorDB>(_entities[1].properties[0]);

  /// See [AuthorDB.name].
  static final name =
      obx.QueryStringProperty<AuthorDB>(_entities[1].properties[1]);

  /// See [AuthorDB.isGuest].
  static final isGuest =
      obx.QueryBooleanProperty<AuthorDB>(_entities[1].properties[2]);
}

/// [ScheduleDB] entity fields to define ObjectBox queries.
class ScheduleDB_ {
  /// See [ScheduleDB.id].
  static final id =
      obx.QueryIntegerProperty<ScheduleDB>(_entities[2].properties[0]);

  /// See [ScheduleDB.weekday].
  static final weekday =
      obx.QueryIntegerProperty<ScheduleDB>(_entities[2].properties[1]);

  /// See [ScheduleDB.start].
  static final start =
      obx.QueryStringProperty<ScheduleDB>(_entities[2].properties[2]);

  /// See [ScheduleDB.end].
  static final end =
      obx.QueryStringProperty<ScheduleDB>(_entities[2].properties[3]);
}
